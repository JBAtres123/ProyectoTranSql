@page "/AsignarVehiculo/{solicitudId:int}/{vehiculoId:int}"
@using ProyectoTranSql.Models
@using Microsoft.EntityFrameworkCore
@inject ProyectoTranSql.Data.MyDbContext DbContext
@inject NavigationManager NavigationManager

<h3>Asignar Vehículo</h3>

@if (asignacion == null)
{
    <p><em>Cargando datos...</em></p>
}
else
{
    <EditForm Model="@asignacion" OnValidSubmit="GuardarAsignacion">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <p>Solicitud: @solicitudId</p> <!-- Mostrar SolicitudID -->
        <p>Colaborador: @asignacion.ColaboradorID</p>
        <p>Vehículo: @asignacion.VehiculoID</p>

        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Guardar Asignación</button>
    </EditForm>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@code {
    [Parameter] public int solicitudId { get; set; }
    [Parameter] public int vehiculoId { get; set; }
    private AsignacionVehiculo asignacion;
    private string errorMessage; // Campo para almacenar mensajes de error
    private bool isSubmitting; // Para controlar el estado del botón de envío

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"solicitudId: {solicitudId}, vehiculoId: {vehiculoId}");

        try
        {
            await Task.Delay(1000);

            var colaboradorID = await ObtenerColaboradorID(solicitudId);
            Console.WriteLine($"colaboradorID: {colaboradorID}");

            if (colaboradorID.HasValue)
            {
                asignacion = new AsignacionVehiculo
                    {
                        ColaboradorID = colaboradorID.Value,
                        VehiculoID = vehiculoId,
                        FechaAsignacion = DateTime.Now
                    };
                Console.WriteLine($"Asignación inicializada: ColaboradorID = {asignacion.ColaboradorID}, VehiculoID = {asignacion.VehiculoID}");
            }
            else
            {
                Console.WriteLine("No se encontró un colaborador con el ID de solicitud dado.");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar la asignación: {ex.Message}"; // Almacena el mensaje de error
            Console.WriteLine(errorMessage);
        }
    }

    private async Task<int?> ObtenerColaboradorID(int solicitudId)
    {
        Console.WriteLine($"Buscando solicitud con ID: {solicitudId}");

        var solicitud = await DbContext.SolicitudReservacion
            .Include(s => s.Colaboradores)
            .FirstOrDefaultAsync(s => s.SolicitudID == solicitudId);

        if (solicitud == null)
        {
            Console.WriteLine($"No se encontró una solicitud con el ID {solicitudId}");
            return null;
        }
        else
        {
            Console.WriteLine($"Solicitud encontrada, ColaboradorID: {solicitud.ColaboradorID}");
            return solicitud.ColaboradorID;
        }
    }

    private async Task GuardarAsignacion()
    {
        isSubmitting = true; // Activar estado de envío

        // Verifica que los IDs no sean nulos
        if (!asignacion.ColaboradorID.HasValue || !asignacion.VehiculoID.HasValue)
        {
            errorMessage = "ColaboradorID o VehiculoID son nulos.";
            Console.WriteLine(errorMessage);
            isSubmitting = false; // Desactivar estado de envío
            return;
        }

        // Iniciar una transacción
        using var transaction = await DbContext.Database.BeginTransactionAsync();

        try
        {
            // Verifica si el VehiculoID es válido
            var vehiculo = await DbContext.Vehiculos.FindAsync(asignacion.VehiculoID);
            if (vehiculo == null)
            {
                errorMessage = $"El VehiculoID {asignacion.VehiculoID} no existe.";
                Console.WriteLine(errorMessage);
                isSubmitting = false; // Desactivar estado de envío
                return; // Salir si el vehículo no existe
            }

            // Guardar la asignación
            Console.WriteLine($"Guardando asignación: ColaboradorID: {asignacion.ColaboradorID}, VehiculoID: {asignacion.VehiculoID}");
            DbContext.AsignacionVehiculo.Add(asignacion);
            await DbContext.SaveChangesAsync();

            // Actualizar el vehículo del colaborador
            var colaborador = await DbContext.Colaboradores.FindAsync(asignacion.ColaboradorID);
            if (colaborador != null)
            {
                colaborador.VehiculoID = asignacion.VehiculoID;
                await DbContext.SaveChangesAsync();
                Console.WriteLine($"Vehículo asignado al colaborador: {colaborador.Nombre} {colaborador.Apellido}");
            }
            else
            {
                errorMessage = $"No se encontró un colaborador con ID: {asignacion.ColaboradorID}";
                Console.WriteLine(errorMessage);
                isSubmitting = false; // Desactivar estado de envío
                return;
            }

            // Crear una notificación
            var notificacion = new NotificacionColaborador
                {
                    SolicitudID = solicitudId,
                    AsignacionVehiculoID = asignacion.AsignacionVehiculoID,
                    ColaboradorID = asignacion.ColaboradorID, // Asigna el ColaboradorID aquí
                    Informacion = $"El vehículo {asignacion.VehiculoID} ha sido asignado al colaborador {colaborador.Nombre} {colaborador.Apellido}.",
                    FechaHora = DateTime.Now
                };


            // Agregar la notificación a la base de datos
            DbContext.NotificacionColaborador.Add(notificacion);
            await DbContext.SaveChangesAsync();

            // Agregar registro a GaritaControl
            var garitaControl = new GaritaControl
                {
                    AsignacionVehiculoID = asignacion.AsignacionVehiculoID, // Usar el ID de asignación recién creado
                    NotificacionGarita = $"El vehículo {asignacion.VehiculoID} ha sido asignado.",
                    FechaNotificacion = DateTime.Now
                };

            // Guardar GaritaControl
            DbContext.GaritaControl.Add(garitaControl);
            await DbContext.SaveChangesAsync();

            // Confirmar la transacción
            await transaction.CommitAsync();

            // Redirigir a la página de visualización
            NavigationManager.NavigateTo("/asignaciones");
        }
        catch (Exception ex)
        {
            await transaction.RollbackAsync();
            errorMessage = $"Error al guardar la asignación: {ex.Message}. InnerException: {ex.InnerException?.Message}";
            Console.WriteLine(errorMessage);
            if (ex.InnerException?.InnerException != null)
            {
                Console.WriteLine($"InnerException: {ex.InnerException.InnerException.Message}");
            }
        }
        finally
        {
            isSubmitting = false; // Desactivar estado de envío en cualquier caso
        }
    }


}

