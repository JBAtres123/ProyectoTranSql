@page "/AsignarVehiculo/{solicitudId:int}/{vehiculoId:int}"
@using ProyectoTranSql.Models
@using Microsoft.EntityFrameworkCore
@inject ProyectoTranSql.Data.MyDbContext DbContext
@inject NavigationManager NavigationManager

<head>
    <link href="css/StyleAsignacionContenido.css" rel="stylesheet" />
</head>

<h3>Asignar Vehículo</h3>

@if (asignacion == null)
{
    <p><em>Cargando datos...</em></p>
}
else
{
    <!-- Tabla para mostrar detalles principales de la solicitud, vehículo y colaborador -->
    <table class="table table-bordered table-striped table-custom">
        <thead class="table-dark">
            <tr>
                <th>Placa del Vehículo</th>
                <th>Nombre del Colaborador</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@placaVehiculo</td>
                <td>@nombreColaborador</td>
            </tr>
        </tbody>
    </table>

    <!-- Formulario de asignación -->
    <EditForm Model="@asignacion" OnValidSubmit="GuardarAsignacion">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <button type="submit" class="btn btn-primary submit-button" disabled="@isSubmitting">Guardar Asignación</button>
    </EditForm>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}

@code {
    [Parameter] public int solicitudId { get; set; }
    [Parameter] public int vehiculoId { get; set; }
    
    private AsignacionVehiculo asignacion;
    private string errorMessage;
    private bool isSubmitting;

    private string placaVehiculo;
    private string nombreColaborador;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"solicitudId: {solicitudId}, vehiculoId: {vehiculoId}");

        try
        {
            await Task.Delay(1000);

            var colaboradorID = await ObtenerColaboradorID(solicitudId);
            Console.WriteLine($"colaboradorID: {colaboradorID}");

            if (colaboradorID.HasValue)
            {
                asignacion = new AsignacionVehiculo
                {
                    ColaboradorID = colaboradorID.Value,
                    VehiculoID = vehiculoId,
                    FechaAsignacion = DateTime.Now
                };
                Console.WriteLine($"Asignación inicializada: ColaboradorID = {asignacion.ColaboradorID}, VehiculoID = {asignacion.VehiculoID}");

                // Obtener detalles de Placa y Nombre del Colaborador para mostrar en la tabla
                placaVehiculo = await ObtenerPlacaVehiculo(vehiculoId);
                nombreColaborador = await ObtenerNombreColaborador(colaboradorID.Value);
            }
            else
            {
                Console.WriteLine("No se encontró un colaborador con el ID de solicitud dado.");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error al cargar la asignación: {ex.Message}";
            Console.WriteLine(errorMessage);
        }
    }

    private async Task<int?> ObtenerColaboradorID(int solicitudId)
    {
        Console.WriteLine($"Buscando solicitud con ID: {solicitudId}");

        var solicitud = await DbContext.SolicitudReservacion
            .FirstOrDefaultAsync(s => s.SolicitudID == solicitudId);

        if (solicitud == null)
        {
            Console.WriteLine($"No se encontró una solicitud con el ID {solicitudId}");
            return null;
        }
        else
        {
            return solicitud.ColaboradorID;
        }
    }

    private async Task<string> ObtenerPlacaVehiculo(int vehiculoId)
    {
        var vehiculo = await DbContext.Vehiculos
            .Where(v => v.VehiculoID == vehiculoId)
            .Select(v => v.Placa)
            .FirstOrDefaultAsync();

        return vehiculo ?? "No disponible";
    }

    private async Task<string> ObtenerNombreColaborador(int colaboradorId)
    {
        var colaborador = await DbContext.Colaboradores
            .Where(c => c.ColaboradorID == colaboradorId)
            .Select(c => c.Nombre)
            .FirstOrDefaultAsync();

        return colaborador ?? "Desconocido";
    }

    private async Task GuardarAsignacion()
    {
        isSubmitting = true;

        if (!asignacion.ColaboradorID.HasValue || !asignacion.VehiculoID.HasValue)
        {
            errorMessage = "ColaboradorID o VehiculoID son nulos.";
            Console.WriteLine(errorMessage);
            isSubmitting = false;
            return;
        }

        using var transaction = await DbContext.Database.BeginTransactionAsync();

        try
        {
            var vehiculo = await DbContext.Vehiculos.FindAsync(asignacion.VehiculoID);
            if (vehiculo == null)
            {
                errorMessage = $"El VehiculoID {asignacion.VehiculoID} no existe.";
                Console.WriteLine(errorMessage);
                isSubmitting = false;
                return;
            }

            DbContext.AsignacionVehiculo.Add(asignacion);
            await DbContext.SaveChangesAsync();

            var colaborador = await DbContext.Colaboradores.FindAsync(asignacion.ColaboradorID);
            if (colaborador != null)
            {
                colaborador.VehiculoID = asignacion.VehiculoID;
                await DbContext.SaveChangesAsync();
                Console.WriteLine($"Vehículo asignado al colaborador: {colaborador.Nombre}");
            }
            else
            {
                errorMessage = $"No se encontró un colaborador con ID: {asignacion.ColaboradorID}";
                Console.WriteLine(errorMessage);
                isSubmitting = false;
                return;
            }

            var notificacion = new NotificacionColaborador
            {
                SolicitudID = solicitudId,
                AsignacionVehiculoID = asignacion.AsignacionVehiculoID,
                ColaboradorID = asignacion.ColaboradorID,
                Informacion = $"El vehículo {asignacion.VehiculoID} ha sido asignado al colaborador {colaborador.Nombre}.",
                FechaHora = DateTime.Now
            };

            DbContext.NotificacionColaborador.Add(notificacion);
            await DbContext.SaveChangesAsync();

            var garitaControl = new GaritaControl
            {
                AsignacionVehiculoID = asignacion.AsignacionVehiculoID,
                NotificacionGarita = $"El vehículo {asignacion.VehiculoID} ha sido asignado.",
                FechaNotificacion = DateTime.Now
            };

            DbContext.GaritaControl.Add(garitaControl);
            await DbContext.SaveChangesAsync();

            await transaction.CommitAsync();

            NavigationManager.NavigateTo("/asignaciones");
        }
        catch (Exception ex)
        {
            await transaction.RollbackAsync();
            errorMessage = $"Error al guardar la asignación: {ex.Message}. InnerException: {ex.InnerException?.Message}";
            Console.WriteLine(errorMessage);
            if (ex.InnerException?.InnerException != null)
            {
                Console.WriteLine($"InnerException: {ex.InnerException.InnerException.Message}");
            }
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
