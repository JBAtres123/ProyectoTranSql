@page "/Inspeccionar/{asignacionId:int}"
@using ProyectoTranSql.Models
@using Microsoft.EntityFrameworkCore
@inject ProyectoTranSql.Data.MyDbContext DbContext
@inject NavigationManager NavigationManager

<head>
    <link href="css/StyleInspeccion.css" rel="stylesheet" />
</head>
<h3>Registrar Inspección</h3>

@if (asignacion == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-bordered table-striped mb-4">
            <thead>
                <tr>
                    <th>ID Asignación</th>
                    <th>Nombre Colaborador</th>
                    <th>Modelo Vehículo</th>
                    <th>Placa</th>
                    <th>Nombre Accesorio</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@inspeccion.AsignacionVehiculoID</td>
                    <td>@asignacion.Colaboradores.Nombre</td>
                    <td>@asignacion.Vehiculo.ModeloVehiculo.Modelo</td>
                    <td>@asignacion.Vehiculo.Placa</td>
                    <td>@(accesorios?.FirstOrDefault(a => a.AccesorioVehiculoID == inspeccion.AccesorioVehiculoID)?.Accesorio?.NombreAccesorio ?? "N/A")</td>
                </tr>
            </tbody>
        </table>
    </div>

    <EditForm Model="inspeccion" OnValidSubmit="RegistrarInspeccion">
        <DataAnnotationsValidator />
        <ValidationSummary class="validation-summary" />

        <h4>Detalles de la Inspección</h4>

        <div class="mb-3">
            <label>ID Asignación</label>
            <input class="form-control" type="text" @bind="@inspeccion.AsignacionVehiculoID" readonly />
        </div>

        <div class="mb-3">
            <label>ID Vehículo</label>
            <input class="form-control" type="text" @bind="@inspeccion.VehiculoID" readonly />
        </div>

        <div class="mb-3">
            <label>ID Accesorio</label>
            <input class="form-control" type="text" @bind="@inspeccion.AccesorioVehiculoID" readonly />
        </div>

        <div class="mb-3">
            <label>Nombre Responsable Entrega</label>
            <input class="form-control" type="text" @bind="@inspeccion.NombreResponsableEntrega" required />
        </div>

        <div class="mb-3">
            <label>Nombre Responsable Recepción</label>
            <input class="form-control" type="text" @bind="@inspeccion.NombreResponsableRecepcion" required />
        </div>

        <div class="mb-3">
            <label>Kilometraje Inicial</label>
            <input class="form-control" type="text" @bind-value="KilometrajeInicialTexto" @bind-value:event="oninput" />
        </div>

        <div class="mb-3">
            <label>Kilometraje Final</label>
            <input class="form-control" type="text" @bind-value="KilometrajeFinalTexto" @bind-value:event="oninput" />
        </div>

        <div class="mb-3">
            <label>Observaciones</label>
            <textarea class="form-control" @bind="@inspeccion.Observaciones" rows="3" required></textarea>
        </div>

        <button type="submit" class="btn btn-primary">Registrar Inspección</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(mensaje))
    {
        <p>@mensaje</p>
    }
}

@code {
    [Parameter]
    public int AsignacionId { get; set; }

    private AsignacionVehiculo asignacion;
    private List<AccesorioVehiculo> accesorios;
    private Inspeccion inspeccion = new Inspeccion();
    private string mensaje;

    public string KilometrajeInicialTexto { get; set; } = string.Empty;
    public string KilometrajeFinalTexto { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        asignacion = await DbContext.AsignacionVehiculo
            .Include(a => a.Colaboradores)
            .Include(a => a.Vehiculo)
                .ThenInclude(v => v.ModeloVehiculo)
            .FirstOrDefaultAsync(a => a.AsignacionVehiculoID == AsignacionId);

        if (asignacion != null)
        {
            inspeccion.AsignacionVehiculoID = asignacion.AsignacionVehiculoID;
            inspeccion.VehiculoID = asignacion.VehiculoID;

            accesorios = await DbContext.AccesorioVehiculo
                .Where(av => av.VehiculoID == asignacion.VehiculoID)
                .Include(av => av.Accesorio)
                .ToListAsync();

            var primerAccesorio = accesorios.FirstOrDefault();
            if (primerAccesorio != null)
            {
                inspeccion.AccesorioVehiculoID = primerAccesorio.AccesorioVehiculoID;
            }
        }
    }

    private decimal ParseKilometraje(string kilometrajeTexto)
    {
        if (decimal.TryParse(kilometrajeTexto.Trim(), out var result))
        {
            return result;
        }
        return 0;
    }

    private async Task RegistrarInspeccion()
    {
        // Validación de kilómetros
        if (ParseKilometraje(KilometrajeInicialTexto) > ParseKilometraje(KilometrajeFinalTexto))
        {
            mensaje = "El Kilometraje Inicial no puede ser mayor que el Kilometraje Final.";
            return;
        }

        // Actualiza el modelo con los valores parseados
        inspeccion.KilometrajeInicial = ParseKilometraje(KilometrajeInicialTexto);
        inspeccion.KilometrajeFinal = ParseKilometraje(KilometrajeFinalTexto);

        DbContext.Inspeccion.Add(inspeccion);
        await DbContext.SaveChangesAsync();

        mensaje = "Inspección registrada con éxito.";
        NavigationManager.NavigateTo("/VerReservarcion");
    }
}
