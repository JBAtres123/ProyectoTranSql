@page "/VerReservarcion"
@using Microsoft.EntityFrameworkCore
@using ProyectoTranSql.Models
@inject ProyectoTranSql.Data.MyDbContext DbContext
@inject NavigationManager NavigationManager

<h3>Listado de Solicitudes de Reservación</h3>

@if (solicitudes == null)
{
    <p><em>Cargando datos...</em></p>
}
else if (!solicitudes.Any())
{
    <p>No se encontraron solicitudes.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Solicitud ID</th>
                <th>Motivo</th>
                <th>Fecha Solicitud</th>
                <th>Colaborador</th>
                <th>Departamento</th>
                <th>Estado de Solicitud</th>
                <th>Destino</th>
                <th>Piloto</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var solicitud in solicitudes)
            {
                <tr>
                    <td>@solicitud.SolicitudID</td>
                    <td>@solicitud.Motivo</td>
                    <td>@solicitud.FechaSolicitud.ToShortDateString()</td>
                    <td>@solicitud.Colaboradores?.Nombre</td>
                    <td>@solicitud.Departamentos?.Nombre</td>
                    <td>@solicitud.EstadosSolicitud?.SolicitudEstado</td>
                    <td>@solicitud.Destino?.NombreDestino</td>
                    <td>@solicitud.Piloto?.NombrePiloto</td>
                    <td>
                        <div class="d-flex justify-content-between">
                            <button class="btn btn-success btn-sm me-1" @onclick="() => AprobarSolicitud(solicitud.SolicitudID)">Aprobada</button>
                            <button class="btn btn-danger btn-sm me-1" @onclick="() => RechazarSolicitud(solicitud.SolicitudID)">Rechazada</button>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<SolicitudReservacion> solicitudes;

    protected override async Task OnInitializedAsync()
    {
        // Cargar las entidades relacionadas con Include
        solicitudes = await DbContext.SolicitudReservacion
            .Include(s => s.Colaboradores)
            .Include(s => s.Departamentos)
            .Include(s => s.EstadosSolicitud)
            .Include(s => s.Destino)
            .Include(s => s.Piloto)
            .ToListAsync();
    }

    private async Task AprobarSolicitud(int solicitudId)
    {
        await CambiarEstado(solicitudId, 1); // Estado Aprobado
        NavigationManager.NavigateTo($"/AprobarSolicitud/{solicitudId}");
    }

    private async Task RechazarSolicitud(int solicitudId)
    {
        await CambiarEstado(solicitudId, 2); // Estado Rechazado
        NavigationManager.NavigateTo($"/RechazarSolicitud/{solicitudId}");
    }


    private async Task CambiarEstado(int solicitudId, int nuevoEstado)
    {
        // Buscar la solicitud en la base de datos
        var solicitud = await DbContext.SolicitudReservacion.FindAsync(solicitudId);

        if (solicitud != null)
        {
            // Cambiar el estado de la solicitud
            solicitud.EstadoSolicitudID = nuevoEstado;

            // Guardar los cambios en la base de datos
            await DbContext.SaveChangesAsync();

            // Recargar las solicitudes para reflejar el cambio
            solicitudes = await DbContext.SolicitudReservacion
                .Include(s => s.Colaboradores)
                .Include(s => s.Departamentos)
                .Include(s => s.EstadosSolicitud)
                .Include(s => s.Destino)
                .Include(s => s.Piloto)
                .ToListAsync();
        }
    }
}



