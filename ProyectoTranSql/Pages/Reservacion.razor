@page "/FormularioReservar"
@using Microsoft.EntityFrameworkCore
@using ProyectoTranSql.Models
@inject ProyectoTranSql.Data.MyDbContext DbContext
@inject NavigationManager Navigation

<link href="css/Formulario.css" rel="stylesheet" />

<div class="form-container">
    <h3>Crear Solicitud de Reservación</h3>

    @if (!formEnviado)
    {
        <EditForm Model="formModel" OnValidSubmit="GuardarDatos">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="campo">
                <label for="colaboradorId" class="etiqueta">Su ID:</label>
                <InputNumber id="colaboradorId" @bind-Value="formModel.ColaboradorID" class="form-control" required readonly />
            </div>

            <div class="campo">
                <label for="nombreDestino" class="etiqueta">Nombre del Destino:</label>
                <InputText id="nombreDestino" @bind-Value="formModel.NombreDestino" class="form-control" required />
            </div>

            <div class="campo">
                <label for="pilotoId" class="etiqueta">Responsable (Seleccionar Piloto):</label>
                <InputSelect id="pilotoId" @bind-Value="formModel.PilotoID" class="form-control" required>
                    <option value="">Seleccione un Piloto</option>
                    @if (listaPilotos != null && listaPilotos.Any())
                    {
                        foreach (var piloto in listaPilotos)
                        {
                            <option value="@piloto.PilotoID">@piloto.NombrePiloto</option>
                        }
                    }
                    else
                    {
                        <option disabled>No hay pilotos disponibles</option>
                    }
                </InputSelect>
            </div>

            <div class="campo">
                <label for="motivo" class="etiqueta">Motivo de la Solicitud:</label>
                <InputTextArea id="motivo" @bind-Value="formModel.Motivo" class="form-control" required />
            </div>

            <div class="campo">
                <label for="fechaSolicitud" class="etiqueta">Fecha de la Solicitud:</label>
                <InputDate id="fechaSolicitud" @bind-Value="formModel.FechaSolicitud" class="form-control" required />
            </div>

            <div>
                <button type="submit" class="btn btn-primary">Guardar Solicitud</button>
            </div>
        </EditForm>
    }
    else
    {
        <p class="exito">Solicitud guardada con éxito.</p>

        <div>
            <button @onclick="NuevoRegistro" class="btn btn-secondary" style="margin-right: 10px;">Crear Otra Solicitud</button>
            <button @onclick="Terminar" class="btn btn-danger">Terminar</button>
        </div>
    }

    @if (!string.IsNullOrEmpty(mensajeError))
    {
        <p class="error">@mensajeError</p>
    }
</div>

@code {
    private FormModel formModel = new FormModel();
    private List<Piloto> listaPilotos;
    private bool formEnviado = false;
    private string mensajeError = null;

    private class FormModel
    {
        public string NombreDestino { get; set; }
        public int? PilotoID { get; set; }  // Cambiado a int? para permitir null
        public string Motivo { get; set; }
        public DateTime FechaSolicitud { get; set; }
        public int ColaboradorID { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        // Cargar la lista de pilotos de la base de datos
        listaPilotos = await DbContext.Piloto.ToListAsync();

        // Obtener el ID del colaborador desde la cadena de consulta
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        string colaboradorIdQuery = query["colaboradorId"];

        if (int.TryParse(colaboradorIdQuery, out int colaboradorId))
        {
            formModel.ColaboradorID = colaboradorId; 
        }
        else
        {
            mensajeError = "ID de colaborador no válido.";
        }
    }

    private async Task GuardarDatos()
    {
        mensajeError = null; // Limpiar mensajes de error previos

        // Validaciones
        if (string.IsNullOrWhiteSpace(formModel.NombreDestino))
        {
            mensajeError += "El campo 'Nombre del Destino' es obligatorio. ";
        }

        if (formModel.PilotoID == null)
        {
            mensajeError += "Por favor, seleccione un piloto. ";
        }

        if (string.IsNullOrWhiteSpace(formModel.Motivo))
        {
            mensajeError += "El campo 'Motivo de la Solicitud' es obligatorio. ";
        }

        if (formModel.FechaSolicitud == default)
        {
            mensajeError += "El campo 'Fecha de la Solicitud' es obligatorio. ";
        }

        if (!string.IsNullOrEmpty(mensajeError))
        {
            return; // Si hay errores, no continuar con la operación
        }

        try
        {
            var colaborador = await DbContext.Colaboradores.FindAsync(formModel.ColaboradorID);

            if (colaborador == null)
            {
                mensajeError = "Colaborador no encontrado.";
                return;
            }

            var nuevoDestino = new Destino
            {
                NombreDestino = formModel.NombreDestino
            };

            await DbContext.Destino.AddAsync(nuevoDestino);
            await DbContext.SaveChangesAsync();

            var nuevaSolicitud = new SolicitudReservacion
            {
                Motivo = formModel.Motivo,
                FechaSolicitud = formModel.FechaSolicitud,
                DestinoID = nuevoDestino.DestinoID,
                PilotoID = formModel.PilotoID.Value,
                ColaboradorID = formModel.ColaboradorID,
                DepartamentoID = colaborador.DepartamentoID,
                EstadoSolicitudID = null,
            };

            await DbContext.SolicitudReservacion.AddAsync(nuevaSolicitud);
            await DbContext.SaveChangesAsync();

            formEnviado = true;
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al guardar la solicitud: {ex.Message}";
            if (ex.InnerException != null)
            {
                mensajeError += $" Detalles: {ex.InnerException.Message}";
            }
        }
    }

    private void NuevoRegistro()
    {
        formModel = new FormModel();
        formEnviado = false;
        mensajeError = null;
    }

    private void Terminar()
    {
        Navigation.NavigateTo("/login");
    }
}
